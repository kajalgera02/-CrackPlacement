class Solution {
private:
    vector<int> delRow = {-1, 1, 0, 0};
    vector<int> delCol = {0, 0, -1, 1};

    bool isValid(int i, int j, int n, int m) {
        return (i >= 0 && i < n && j >= 0 && j < m);
    }

    void dfs(int row, int col, vector<vector<int>>& ans, vector<vector<int>>& image, int newColor, int iniColor) {
        ans[row][col] = newColor;
        int n = image.size();
        int m = image[0].size();
        for (int k = 0; k < 4; k++) {
            int nrow = row + delRow[k];
            int ncol = col + delCol[k];
            if (isValid(nrow, ncol, n, m) && image[nrow][ncol] == iniColor && ans[nrow][ncol] != newColor) {
                dfs(nrow, ncol, ans, image, newColor, iniColor);
            }
        }
    }

public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int iniColor = image[sr][sc];
        if (iniColor == newColor) return image; // prevent infinite loop
        vector<vector<int>> ans = image;
        dfs(sr, sc, ans, image, newColor, iniColor);
        return ans;
    }
};
