class Solution {
private:
    void dfs(int row, int col, vector<vector<int>>& vis,
             vector<vector<int>>& grid, vector<pair<int,int>>& shape, 
             int baseRow, int baseCol) {
        
        int n = grid.size();
        int m = grid[0].size();
        vis[row][col] = 1;
        
        // store relative position
        shape.push_back({row - baseRow, col - baseCol});
        
        // 4 directions
        int dr[4] = {-1, 0, 1, 0};
        int dc[4] = {0, 1, 0, -1};
        
        for(int i = 0; i < 4; i++) {
            int nr = row + dr[i];
            int nc = col + dc[i];
            if(nr >= 0 && nr < n && nc >= 0 && nc < m &&
               grid[nr][nc] == 1 && !vis[nr][nc]) {
                dfs(nr, nc, vis, grid, shape, baseRow, baseCol);
            }
        }
    }

public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        set<vector<pair<int,int>>> st; // store unique shapes

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(grid[i][j] == 1 && !vis[i][j]) {
                    vector<pair<int,int>> shape;
                    dfs(i, j, vis, grid, shape, i, j);
                    st.insert(shape);
                }
            }
        }
        return st.size();
    }
};
